{"version":3,"file":"nav2d.min.js","mappings":"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","sources":["webpack://nav2d/webpack/universalModuleDefinition","webpack://nav2d/external umd {\"root\":\"earcut\",\"amd\":\"earcut\",\"commonjs2\":\"earcut\",\"commonjs\":\"earcut\"}","webpack://nav2d/external umd {\"root\":\"point-in-polygon\",\"amd\":\"point-in-polygon\",\"commonjs2\":\"point-in-polygon\",\"commonjs\":\"point-in-polygon\"}","webpack://nav2d/external umd {\"root\":\"simple-quadtree\",\"amd\":\"simple-quadtree\",\"commonjs2\":\"simple-quadtree\",\"commonjs\":\"simple-quadtree\"}","webpack://nav2d/external umd {\"root\":\"uuid\",\"amd\":\"uuid\",\"commonjs2\":\"uuid\",\"commonjs\":\"uuid\"}","webpack://nav2d/webpack/bootstrap","webpack://nav2d/webpack/runtime/define property getters","webpack://nav2d/webpack/runtime/hasOwnProperty shorthand","webpack://nav2d/webpack/runtime/make namespace object","webpack://nav2d/./src/math.js","webpack://nav2d/./node_modules/tinyqueue/index.js","webpack://nav2d/./src/navmesh.js","webpack://nav2d/./src/nav2d.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"uuid\"), require(\"point-in-polygon\"), require(\"earcut\"), require(\"simple-quadtree\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"uuid\", \"point-in-polygon\", \"earcut\", \"simple-quadtree\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"nav2d\"] = factory(require(\"uuid\"), require(\"point-in-polygon\"), require(\"earcut\"), require(\"simple-quadtree\"));\n\telse\n\t\troot[\"nav2d\"] = factory(root[\"uuid\"], root[\"point-in-polygon\"], root[\"earcut\"], root[\"simple-quadtree\"]);\n})((typeof self !== 'undefined' ? self : this), (__WEBPACK_EXTERNAL_MODULE__592__, __WEBPACK_EXTERNAL_MODULE__100__, __WEBPACK_EXTERNAL_MODULE__651__, __WEBPACK_EXTERNAL_MODULE__395__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__651__;","module.exports = __WEBPACK_EXTERNAL_MODULE__100__;","module.exports = __WEBPACK_EXTERNAL_MODULE__395__;","module.exports = __WEBPACK_EXTERNAL_MODULE__592__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const EPS = 1e-8;\n\nexport class Vector {\n    constructor(x, y) {\n        if (typeof x !== \"number\" || typeof y !== \"number\") {\n            throw new Error(\"Vector components must be numbers.\");\n        }\n\n        this.x = x;\n        this.y = y;\n    }\n\n    _normOther(other) {\n        if (typeof other == \"number\") {\n            return new Vector(other, other);\n        }\n        return other;\n    }\n\n    add(other) {\n        other = this._normOther(other);\n        return new Vector(this.x + other.x, this.y + other.y);\n    }\n\n    sub(other) {\n        other = this._normOther(other);\n        return new Vector(this.x - other.x, this.y - other.y);\n    }\n\n    mul(other) {\n        other = this._normOther(other);\n        return new Vector(this.x * other.x, this.y * other.y);\n    }\n\n    div(other) {\n        other = this._normOther(other);\n        return new Vector(this.x / other.x, this.y / other.y);\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    equals(other) {\n        return isclose(this.x, other.x) && isclose(this.y, other.y);\n    }\n\n    angle(other) {\n        return Math.acos(\n            clip(-1, 1, dot(this, other) / (this.length() * other.length()))\n        );\n    }\n\n    counterclockwiseAngle(other) {\n        const angle = this.angle(other);\n        return cross(this, other) >= 0 ? angle : 2 * Math.PI - angle;\n    }\n\n    toString() {\n        return `{ x: ${this.x}, y: ${this.y} }`;\n    }\n}\n\nexport function dot(a, b) {\n    return a.x * b.x + a.y * b.y;\n}\n\nexport function cross(a, b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nexport function isclose(a, b, eps = EPS) {\n    return a > b - eps && a < b + eps;\n}\n\nexport function clip(a, b, v) {\n    if (v < a) return a;\n    if (v > b) return b;\n    return v;\n}\n","\nexport default class TinyQueue {\n    constructor(data = [], compare = defaultCompare) {\n        this.data = data;\n        this.length = this.data.length;\n        this.compare = compare;\n\n        if (this.length > 0) {\n            for (let i = (this.length >> 1) - 1; i >= 0; i--) this._down(i);\n        }\n    }\n\n    push(item) {\n        this.data.push(item);\n        this.length++;\n        this._up(this.length - 1);\n    }\n\n    pop() {\n        if (this.length === 0) return undefined;\n\n        const top = this.data[0];\n        const bottom = this.data.pop();\n        this.length--;\n\n        if (this.length > 0) {\n            this.data[0] = bottom;\n            this._down(0);\n        }\n\n        return top;\n    }\n\n    peek() {\n        return this.data[0];\n    }\n\n    _up(pos) {\n        const {data, compare} = this;\n        const item = data[pos];\n\n        while (pos > 0) {\n            const parent = (pos - 1) >> 1;\n            const current = data[parent];\n            if (compare(item, current) >= 0) break;\n            data[pos] = current;\n            pos = parent;\n        }\n\n        data[pos] = item;\n    }\n\n    _down(pos) {\n        const {data, compare} = this;\n        const halfLength = this.length >> 1;\n        const item = data[pos];\n\n        while (pos < halfLength) {\n            let left = (pos << 1) + 1;\n            let best = data[left];\n            const right = left + 1;\n\n            if (right < this.length && compare(data[right], best) < 0) {\n                left = right;\n                best = data[right];\n            }\n            if (compare(best, item) >= 0) break;\n\n            data[pos] = best;\n            pos = left;\n        }\n\n        data[pos] = item;\n    }\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n","import { v4 as uuidv4 } from \"uuid\";\nimport inside from \"point-in-polygon\";\nimport earcut from \"earcut\";\nimport QuadTree from \"simple-quadtree\";\nimport TinyQueue from \"tinyqueue\";\n\nimport { Vector, isclose, cross, dot } from \"./math.js\";\n\nfunction _normalizePoint(point) {\n    if (point instanceof Array) {\n        return new Vector(...point);\n    } else if (point instanceof Vector) {\n        return point;\n    } else if (point.hasOwnProperty(\"x\") && point.hasOwnProperty(\"y\")) {\n        return new Vector(point.x, point.y);\n    }\n}\n\nexport class Edge {\n    constructor(p1, p2) {\n        this._uuid = uuidv4();\n        this.p1 = _normalizePoint(p1);\n        this.p2 = _normalizePoint(p2);\n    }\n\n    length() {\n        return this.p1.sub(this.p2).length();\n    }\n\n    direction() {\n        return this.p1.sub(this.p2);\n    }\n\n    onEdge(point) {\n        point = _normalizePoint(point);\n        const pointVec = this.p1.sub(point);\n\n        if (!this.parallel(pointVec)) return false;\n\n        // test that it's not only collinear, but falls between p1 and p2\n        const direction = this.direction();\n        const len = this.length();\n        const component = dot(direction, pointVec) / (len * len);\n        return component >= 0 && component <= 1;\n    }\n\n    parallel(other) {\n        const otherDirection =\n            other instanceof Vector ? other : other.p1.sub(other.p2);\n        return isclose(cross(this.direction(), otherDirection), 0);\n    }\n\n    collinear(other) {\n        const direction = this.direction();\n        const otherVec1 = this.p1.sub(other.p1);\n        const otherVec2 = this.p1.sub(other.p2);\n        return (\n            isclose(cross(direction, otherVec1), 0) &&\n            isclose(cross(direction, otherVec2), 0)\n        );\n    }\n\n    overlap(other) {\n        if (!this.collinear(other)) {\n            throw new Error(\n                \"Cannot compute overlap of two non-collinear edges.\"\n            );\n        }\n\n        let endpoints = [];\n\n        if (this.onEdge(other.p1)) endpoints.push(other.p1);\n        if (this.onEdge(other.p2)) endpoints.push(other.p2);\n        if (other.onEdge(this.p1)) endpoints.push(this.p1);\n        if (other.onEdge(this.p2)) endpoints.push(this.p2);\n\n        // enpoints can also be the an array with twice the same point,\n        // which is fine as it yields a zero-length edge\n        if (endpoints.length > 2) {\n            endpoints = endpoints.filter(\n                (p, i) => endpoints.findIndex((op) => op.equals(p)) === i\n            );\n        }\n\n        if (!endpoints.length) {\n            return null;\n        } else if (endpoints.length == 1) {\n            endpoints = [endpoints[0], endpoints[0]];\n        }\n\n        return new Edge(...endpoints);\n    }\n\n    equals(other) {\n        return (\n            (this.p1.equals(other.p1) && this.p2.equals(other.p2)) ||\n            (this.p1.equals(other.p2) && this.p2.equals(other.p1))\n        );\n    }\n}\n\nexport class Polygon {\n    constructor(points) {\n        this._uuid = uuidv4();\n        this.points = points.map(_normalizePoint);\n        this.bounds = this._computeBounds();\n    }\n\n    _computeBounds() {\n        return this.points.reduce(\n            (a, p) => [\n                Math.min(p.x, a[0]),\n                Math.min(p.y, a[1]),\n                Math.max(p.x, a[2]),\n                Math.max(p.y, a[3]),\n            ],\n            [Infinity, Infinity, -Infinity, -Infinity]\n        );\n    }\n\n    edges() {\n        return this.points.map(\n            (point, i) =>\n                new Edge(\n                    i == 0\n                        ? this.points[this.points.length - 1]\n                        : this.points[i - 1],\n                    point\n                )\n        );\n    }\n\n    centroid() {\n        return this.points\n            .reduce((acc, point) => acc.add(point), new Vector(0, 0))\n            .div(this.points.length);\n    }\n\n    centroidDistance(other) {\n        const centroidVector = this.centroid().sub(other.centroid());\n        return centroidVector.length();\n    }\n\n    contains(point) {\n        point = _normalizePoint(point);\n        const polyPoints = this.points.map(this._toPointArray);\n        return (\n            inside(this._toPointArray(point), polyPoints) ||\n            !!this.onEdge(point)\n        );\n    }\n\n    _toPointArray(point) {\n        return [point.x, point.y];\n    }\n\n    onEdge(point) {\n        point = _normalizePoint(point);\n        for (const edge of this.edges()) {\n            if (edge.onEdge(point)) return edge;\n        }\n\n        return null;\n    }\n\n    touches(otherEdge) {\n        for (const edge of this.edges()) {\n            if (\n                (edge.onEdge(otherEdge.p1) || edge.onEdge(otherEdge.p2)) &&\n                edge.collinear(otherEdge)\n            ) {\n                return edge;\n            }\n        }\n\n        return null;\n    }\n\n    boundsSize() {\n        const [minx, miny, maxx, maxy] = this.bounds;\n        return { x: minx, y: miny, w: maxx - minx, h: maxy - miny };\n    }\n}\n\nexport class NavMesh {\n    constructor(polygons, costFunc = null, heuristicFunc = null) {\n        this._uuid = uuidv4();\n        this.polygons = this._triangulate(polygons).map(\n            (points) => new Polygon(points)\n        );\n        this.costFunc = costFunc;\n        this.heuristicFunc = heuristicFunc;\n\n        // This will be used to check point collision with\n        // triangles. This should be much smaller that the typical\n        // size of your mesh triangles to avoid checking too many\n        // triangles for collision.\n        this.pointQuerySize = 0.01;\n\n        this._buildQuadtree();\n        this._buildNeighbors();\n    }\n\n    _triangulate(polygons) {\n        const triangles = [];\n        for (const poly of polygons) {\n            const trianglesIndices = earcut(this._flatten(poly));\n            for (let i = 0; i < trianglesIndices.length / 3; i++) {\n                const indices = trianglesIndices.slice(i * 3, i * 3 + 3);\n                triangles.push(indices.map((j) => poly[j]));\n            }\n        }\n        return triangles;\n    }\n\n    _flatten(points) {\n        const flatPoints = [];\n        for (const point of points) {\n            if (point instanceof Array) {\n                flatPoints.push(...point);\n            } else {\n                flatPoints.push(point.x, point.y);\n            }\n        }\n        return flatPoints;\n    }\n\n    _buildQuadtree() {\n        // Use quad tree because the naive approach of iterating\n        // with two nested for loops over the polygons has performance\n        // n*lon(n), which for a 30x30 grid already takes a minute.\n        // This thing, for the same grid, takes 1 second, and scales linearly.\n        this.qt = QuadTree(-Infinity, -Infinity, Infinity, Infinity);\n        for (const poly of this.polygons) {\n            this.qt.put({\n                ...poly.boundsSize(),\n                polygon: poly,\n            });\n        }\n    }\n\n    _buildNeighbors() {\n        this.polygons.forEach((polygon) => (polygon.neighbors = {}));\n\n        for (let i = 0; i < this.polygons.length; i++) {\n            const poly1 = this.polygons[i];\n\n            for (const poly2wrap of this.qt.get(poly1.boundsSize())) {\n                const poly2 = poly2wrap.polygon;\n\n                if (poly1 === poly2) continue;\n                if (poly1.neighbors.hasOwnProperty(poly2._uuid)) continue;\n\n                const portal = this._computePortal(poly1, poly2);\n                if (portal !== null && portal.length() > 0) {\n                    // Ensure that portal points are given in left-to-right order, viewed from the centroid of the polygon\n                    let [p1, p2] = this._orderLeftRight(\n                        poly1.centroid(),\n                        portal.p1,\n                        portal.p2\n                    );\n                    poly1.neighbors[poly2._uuid] = {\n                        polygon: poly2,\n                        portal: new Edge(p1, p2),\n                    };\n                    poly2.neighbors[poly1._uuid] = {\n                        polygon: poly1,\n                        portal: new Edge(p2, p1),\n                    };\n                }\n            }\n        }\n    }\n\n    _computePortal(poly1, poly2) {\n        for (const edge1 of poly1.edges()) {\n            const edge2 = poly2.touches(edge1);\n            if (edge2 !== null) {\n                return edge1.overlap(edge2);\n            }\n        }\n\n        return null;\n    }\n\n    findPath(from, to) {\n        from = _normalizePoint(from);\n        to = _normalizePoint(to);\n\n        const path = this._findPath(from, to);\n        return path && this._funnel(from, to, path);\n    }\n\n    _findPath(from, to) {\n        // This is the A* algorithm\n        const fromPoly = this._findContainingPolygon(from);\n        const toPoly = this._findContainingPolygon(to);\n\n        if (fromPoly === null || toPoly === null) return null;\n\n        const frontier = new TinyQueue(\n            [{ cost: 0, polygon: fromPoly }],\n            (a, b) => a.cost - b.cost\n        );\n        const cameFrom = { [fromPoly._uuid]: null };\n        const cost = { [fromPoly._uuid]: 0 };\n\n        while (frontier.length) {\n            const current = frontier.pop().polygon;\n\n            if (current._uuid === toPoly._uuid) {\n                break;\n            }\n\n            for (const { polygon: next } of Object.values(current.neighbors)) {\n                const nextCost =\n                    cost[current._uuid] + this._computeCost(current, next);\n\n                if (\n                    // node not yet visited\n                    !cost.hasOwnProperty(next._uuid) ||\n                    // this path to node has lower cost\n                    nextCost < cost[next._uuid]\n                ) {\n                    frontier.push({\n                        cost: nextCost + this._heuristic(next, toPoly),\n                        polygon: next,\n                    });\n                    cost[next._uuid] = nextCost;\n                    cameFrom[next._uuid] = current;\n                }\n            }\n        }\n\n        return this._reconstructPath(toPoly, cameFrom);\n    }\n\n    _computeDistance(a, b) {\n        return a.centroidDistance(b);\n    }\n\n    _computeCost(a, b) {\n        if (this.costFunc !== null) {\n            const portal = a.neighbors[b._uuid].portal;\n            return this.costFunc(a, b, portal);\n        }\n        return this._computeDistance(a, b);\n    }\n\n    _heuristic(poly, to) {\n        if (poly._uuid == to._uuid) return 0;\n        if (this.heuristicFunc !== null) return this.heuristicFunc(poly, to);\n        return this._computeDistance(poly, to);\n    }\n\n    _findContainingPolygon(point) {\n        const halfQuerySize = this.pointQuerySize / 2;\n        const bounds = {\n            x: point.x - halfQuerySize,\n            y: point.y - halfQuerySize,\n            w: this.pointQuerySize,\n            h: this.pointQuerySize,\n        };\n        for (const poly of this.qt.get(bounds)) {\n            if (poly.polygon.contains(point)) return poly.polygon;\n        }\n\n        return null;\n    }\n\n    _reconstructPath(to, cameFrom) {\n        if (!cameFrom.hasOwnProperty(to._uuid)) {\n            // Disconnected\n            return null;\n        }\n\n        let current = to;\n\n        const path = [];\n        while (current !== null) {\n            path.push(current);\n            current = cameFrom[current._uuid];\n        }\n\n        return path.reverse();\n    }\n\n    /** Funnel algorithm, following https://medium.com/@reza.teshnizi/the-funnel-algorithm-explained-visually-41e374172d2d */\n    _funnel(from, to, path) {\n        if (path.length === 0) {\n            throw new Error(\"Path cannot be empty.\");\n        } else if (path.length === 1) {\n            return [from, to];\n        }\n\n        const tail = [from];\n        const left = [];\n        const right = [];\n\n        // Initialize funnel\n        const initialPortal = path[0].neighbors[path[1]._uuid].portal;\n        left.push(initialPortal.p1);\n        right.push(initialPortal.p2);\n\n        // Iterate over portals\n        for (let i = 1; i < path.length - 1; i++) {\n            const poly = path[i];\n            const nextPoly = path[i + 1];\n            const portal = poly.neighbors[nextPoly._uuid].portal;\n            // The portal end points are in left-to-right order, viewed from the inside of the polygon.\n            this._extendFunnel(tail, left, right, portal.p1, portal.p2);\n        }\n\n        // Close funnel to endpoint\n        this._extendFunnel(tail, left, right, to, to);\n\n        return tail;\n    }\n\n    _extendFunnel(tail, left, right, leftPoint, rightPoint) {\n        // Extend funnel on the left\n        this._extendFunnelSide(tail, left, right, true, leftPoint);\n        // Extend funnel on the right\n        this._extendFunnelSide(tail, left, right, false, rightPoint);\n    }\n\n    _extendFunnelSide(tail, left, right, extendLeft, newPoint) {\n        const apex = tail[tail.length - 1];\n        // We pretend to be in the `expandLeft` case here. Otherwise flip.\n        if (!extendLeft) {\n            [left, right] = [right, left];\n        }\n\n        // If `newPoint` is the end point of the left side of the funnel, skip it.\n        const lastLeft =\n            left.length === 0 ? tail[tail.length - 1] : left[left.length - 1];\n        if (newPoint.equals(lastLeft)) {\n            return;\n        }\n\n        // Determine how far to shrink the funnel\n        let j = this._findFirstLeftOfPoint(\n            apex,\n            left,\n            newPoint,\n            true,\n            !extendLeft\n        );\n        // All points in `left` with index `< j` are right of `newPoint` and\n        // all points in `left` with index `>= j` are left of or at the same angle as `newPoint`.\n        left.length = j; // Shrink funnel if `j < left.length`\n        left.push(newPoint);\n        if (j === 0) {\n            // If the funnel shrunk all the way on the left, it might collapse to the right.\n            // Determine how far it needs to collapse\n            let k = this._findFirstLeftOfPoint(\n                apex,\n                right,\n                newPoint,\n                false,\n                extendLeft\n            );\n            // All points in `right` with index `< k` are left of or at the same angle as `newPoint` and\n            // all points in `right` with index `>= k` are right of `newPoint`.\n            tail.push(...right.splice(0, k)); // Collapse funnel if `k > 0`\n        }\n    }\n\n    /**\n     * Given an array `arr` of points, find the index of the first one that is\n     * on the left side of a given point `p`, viewed from `origin`. If no such\n     * point exists, the length of the list is returned.\n     *\n     * If `flip` is true, find the first that is on the right side instead.\n     *\n     * If `acceptColinear` is true, the returned point may also be colinear.\n     */\n    _findFirstLeftOfPoint(origin, arr, p, acceptColinear, flip) {\n        let i;\n        for (i = 0; i < arr.length; i++) {\n            const found = flip\n                ? this._isInLeftRightOrder(origin, p, arr[i], acceptColinear)\n                : this._isInLeftRightOrder(origin, arr[i], p, acceptColinear);\n            if (found) return i;\n        }\n        return i;\n    }\n\n    /**\n     * Are the points `p1` and `p2` in left-to-right order, viewed from `origin`?\n     * If points are colinear, the value of `acceptColinear` is returned.\n     */\n    _isInLeftRightOrder(origin, p1, p2, acceptColinear = false) {\n        const vec1 = p1.sub(origin);\n        const vec2 = p2.sub(origin);\n        const c = cross(vec1, vec2);\n        return acceptColinear ? c <= 0 : c < 0;\n    }\n\n    /** Returns the points `p1` and `p2` in left-to-right order, viewed from `origin`. */\n    _orderLeftRight(origin, p1, p2) {\n        if (this._isInLeftRightOrder(origin, p1, p2)) {\n            return [p1, p2];\n        } else {\n            return [p2, p1];\n        }\n    }\n}\n","import { Vector, isclose, clip, dot, cross } from \"./math.js\";\nimport { Edge, Polygon, NavMesh } from \"./navmesh.js\";\n\nconst Point = Vector;\n\nexport { Point, Vector, isclose, clip, dot, cross, Edge, Polygon, NavMesh };\n"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__592__","__WEBPACK_EXTERNAL_MODULE__100__","__WEBPACK_EXTERNAL_MODULE__651__","__WEBPACK_EXTERNAL_MODULE__395__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","EPS","Vector","x","y","_classCallCheck","Error","other","_normOther","Math","sqrt","isclose","acos","clip","dot","length","angle","cross","PI","concat","a","b","eps","arguments","v","TinyQueue","constructor","data","compare","defaultCompare","i","_down","push","item","_up","pop","top","bottom","peek","pos","parent","current","halfLength","left","best","right","_normalizePoint","point","Array","_construct","_toConsumableArray","Edge","p1","p2","_uuid","uuidv4","_createClass","sub","pointVec","parallel","direction","len","component","otherDirection","otherVec1","otherVec2","collinear","endpoints","onEdge","filter","p","findIndex","op","equals","Polygon","points","map","bounds","_computeBounds","reduce","min","max","Infinity","_this","acc","add","div","centroid","polyPoints","_toPointArray","inside","_step","_iterator","_createForOfIteratorHelper","edges","s","n","done","edge","err","e","f","otherEdge","_step2","_iterator2","_this$bounds","_slicedToArray","minx","miny","w","h","NavMesh","polygons","costFunc","heuristicFunc","_triangulate","pointQuerySize","_buildQuadtree","_buildNeighbors","_step3","_this2","triangles","_iterator3","_loop","poly","trianglesIndices","earcut","_flatten","indices","slice","j","_step4","flatPoints","_iterator4","apply","qt","QuadTree","_step5","_iterator5","put","_objectSpread","boundsSize","polygon","forEach","neighbors","_step6","poly1","_iterator6","poly2","portal","_computePortal","_this$_orderLeftRight2","_orderLeftRight","_step7","_iterator7","edge1","edge2","touches","overlap","from","to","path","_findPath","_funnel","fromPoly","_findContainingPolygon","toPoly","frontier","cost","cameFrom","_defineProperty","_i","_Object$values","values","next","nextCost","_computeCost","_heuristic","_reconstructPath","centroidDistance","_computeDistance","_step8","halfQuerySize","_iterator8","contains","reverse","tail","initialPortal","nextPoly","_extendFunnel","leftPoint","rightPoint","_extendFunnelSide","extendLeft","newPoint","apex","_ref","lastLeft","_findFirstLeftOfPoint","k","splice","origin","arr","acceptColinear","flip","_isInLeftRightOrder","c","Point"],"sourceRoot":""}